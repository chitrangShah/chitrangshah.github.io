<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chitrang Shah</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chitrangshah.github.io/"/>
  <updated>2018-06-17T22:17:39.000Z</updated>
  <id>https://chitrangshah.github.io/</id>
  
  <author>
    <name>Chitrang Shah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Resolving Glass Configuration Maps in Glass Mapper v4 using Castle Windsor</title>
    <link href="https://chitrangshah.github.io/2015/11/10/resolving-glass-configuration-maps-in-glass-mapper-v4-castle-windsor/"/>
    <id>https://chitrangshah.github.io/2015/11/10/resolving-glass-configuration-maps-in-glass-mapper-v4-castle-windsor/</id>
    <published>2015-11-10T22:57:03.000Z</published>
    <updated>2018-06-17T22:17:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>In one of my recent projects, we used the new version of <a href="http://www.glass.lu/Blog/GlassV4" target="_blank" rel="noopener">Glass Mapper</a>. One of the new features Glass has introduced is that of using Fluent Configuration API [<em>Glass Configuration Maps</em>] which helps in keeping the POCO’s isolated and re-usable. Below is an example of how I am using it with <a href="http://www.castleproject.org/projects/windsor/" target="_blank" rel="noopener">Castle Windsor</a>.</p><a id="more"></a><p>Here is a simple model that we will use for reference.</p><pre><code>public class TestPOCO{    public virtual string Title { get;set; }    public virtual IEnumerable&lt;Item&gt; ListItems { get;set; }    public virtual bool IsTestSite { get;set;}}</code></pre><p>Now, we will map it to Sitecore using the Glass Map feature. </p><h4 id="V4-Glass-Map-POCO"><a href="#V4-Glass-Map-POCO" class="headerlink" title="V4 Glass Map POCO"></a>V4 Glass Map POCO</h4><pre><code>public class TestPOCOConfig : SitecoreGlassMap&lt;TestPOCO&gt; //inherits &lt;IGlassMap&gt;    {        public override void Configure()        {            Map(                x =&gt; x.AutoMap(),                x =&gt;  x.Field(y =&gt;  y.Title).FieldName(&quot;Headline&quot;),                x =&gt;                  x.Field(y =&gt;  y.ListItems).FieldName(&quot;List Items&quot;).Setting(SitecoreFieldSettings.InferType),                x =&gt;  x.Delegate(y =&gt;  y.IsTestSite).GetValue(y =&gt; IsTestSite())                  //Delegate lets you call a method and use it&apos;s value...how cool is that!                );        }    }    </code></pre><p>The above configuration is similar to what was present in V3 but is much easier to read and manage IMO. </p><h4 id="V3-POCO"><a href="#V3-POCO" class="headerlink" title="V3 POCO"></a>V3 POCO</h4><pre><code>[SitecoreType(AutoMap =  true)]public class TestPOCO{    [SitecoreField(&quot;Headline&quot;)]    public virtual string Title { get; set; }    [SitecoreField(&quot;List Items&quot;, Setting = SitecoreFieldSettings.InferType)]    public virtual IEnumerable&lt;Item&gt; ListItems { get; set; }    public virtual bool IsTestSite { get; set; }}</code></pre><p>Glass also added the new <code>Delegate</code> feature which is simply awesome as seen above! You can read more about it here <a href="http://cardinalcore.co.uk/2014/07/02/controlling-glass-fields-from-your-own-code/" target="_blank" rel="noopener">Glass Mapper Delegate</a>.</p><p>We have the original model and the Glass Map configuration for the model set up correctly for use. Now we need to register it so Glass can pick it up and Windsor can resolve it. </p><p>Below is how we would do it via the basic Glass Configuration in the <code>GlassMapperScCustom.cs</code> file.</p><pre><code>public static void AddMaps(IConfigFactory&lt;IGlassMap&gt; mapsConfigFactory){     // Add maps here      mapsConfigFactory.Add(() =&gt; new TestPOCOConfig());}</code></pre><p>Because we will be adding a bunch of models during development, we decided to resolve all of them via an IoC container such as Castle Windsor. You can use any of the IoC containers to do the same thing.<br><a href="http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison" target="_blank" rel="noopener">Check this for best IoC performer</a>.</p><p>I created a new class called <code>GlassMapConfigFactory.cs</code> which inherits from <code>IConfigFactory&lt;IGlassMap&gt;</code>. The below code scans through the assembly and registers all the classes which inherit <code>IGlassMap</code>.</p><pre><code>public class GlassMapConfigFactory : IConfigFactory&lt;IGlassMap&gt;{    public void Insert(int index, Func&lt;IGlassMap&gt; add)    {        throw new NotImplementedException();    }    public void Add(Func&lt;IGlassMap&gt; add)    {        throw new NotImplementedException();    }    public IEnumnerable&lt;IGlassMap&gt; GetItems()    {        IWindsorContainer container = new WindsorContainer();        container.Register(Classes.FromThisAssembly().BasedOn&lt;IGlassMap&gt;().WithServiceBase());        return container.ResolveAll&lt;IGlassMap&gt;();    }}</code></pre><p>The last thing remaining to do is to tell Glass to pick this up in the <code>GlassMapperScCustom.cs</code> file. </p><pre><code>public static IDependencyResolver CreateResolver(){    var config = new Glass.Mapper.Sc.Config();    var dependencyResolver = new DependencyResolver(config)    {        ConfigurationMapFactory = new GlassMapConfigFactory();    };    return dependencyResolver;}</code></pre><p>Comment this out</p><pre><code>public static void AddMaps(IConfigFactory&lt;IGlassMap&gt; mapsConfigFactory){     // Add maps here     //Resolved via Windsor      //mapsConfigFactory.Add(() =&gt; new TestPOCOConfig());}</code></pre><p>That’s it! Now, if you rebuild your solution and re-load the page which uses the above model, it will still work as before without any issues. You will not have to touch the <code>GlassMapperScCustom.cs</code> again for configuring new models.</p><p>Have a look at the below posts as well from the author/creator of this feature:</p><p><a href="http://cardinalcore.co.uk/2015/09/03/life-through-a-lens-automatically-registering-glass-configuration-maps-using-a-container/" target="_blank" rel="noopener">Registering Glass Maps using a container</a></p><p><a href="http://cardinalcore.co.uk/2015/02/03/resolving-sitecore-controllers-from-your-ioc-container/" target="_blank" rel="noopener">Resolving Sitecore controllers using IoC</a></p><p>Let me know if you run into any issues or have any feedback. Cheers! :)</p>]]></content>
    
    <summary type="html">
    
      This post describes how to setup Glass Maps with Glass Mapper v4 in Sitecore using Castle Windsor.
    
    </summary>
    
    
      <category term="sitecore" scheme="https://chitrangshah.github.io/tags/sitecore/"/>
    
      <category term="castle windsor" scheme="https://chitrangshah.github.io/tags/castle-windsor/"/>
    
      <category term="glass mapper" scheme="https://chitrangshah.github.io/tags/glass-mapper/"/>
    
      <category term="glass maps" scheme="https://chitrangshah.github.io/tags/glass-maps/"/>
    
      <category term="sitecore mvc" scheme="https://chitrangshah.github.io/tags/sitecore-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Static Blog Setup with Hexo, Amazon S3 and Grunt - Automating deployment with Grunt</title>
    <link href="https://chitrangshah.github.io/2014/03/13/static-blog-site-with-hexo-part-3/"/>
    <id>https://chitrangshah.github.io/2014/03/13/static-blog-site-with-hexo-part-3/</id>
    <published>2014-03-13T20:00:00.000Z</published>
    <updated>2018-06-17T22:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is Part-3 and the last post in the series on “<em>Static Blog Setup with Hexo, Amazon S3 and Grunt</em>“. You can view all the posts in this series here, <a href="/tags/static-blog-setup/">Static Blog Setup with Hexo, Amazon S3 and Grunt</a>.</em></p><p>In the last <a href="/2014/03/10/static-blog-site-with-hexo-part-2/">post</a>, we setup hosting for the blog and configured DNS entries for our custom domain. In this final post of this series, we will automate the deployment to S3 using Grunt.js. </p><a id="more"></a><h3 id="What-is-Grunt"><a href="#What-is-Grunt" class="headerlink" title="What is Grunt?"></a>What is Grunt?</h3><p>Grunt is a JavaScript task runner, which let’s you automate repetitive tasks such as minification, compiling, deployment, etc. making your job easier. Also, the Grunt ecosystem is huge with hundreds of plugins to choose from which will automate just about anything with minimum effort. You can read more about Grunt in detail here, <a href="http://gruntjs.com/getting-started" target="_blank" rel="noopener">Getting started with Grunt.js</a>. </p><p>For the Hexo blog, we will use a specific set of plugins to perform common hexo tasks of cleaning, generating the <em>public</em> folder and starting the local server to automating the deployment of the generated files to the staging and production buckets on S3.</p><h3 id="Let’s-Grunt"><a href="#Let’s-Grunt" class="headerlink" title="Let’s Grunt!"></a>Let’s Grunt!</h3><p>Installing Grunt is very easy if you have already installed Node.js:</p><pre><code>npm install -g grunt-cli</code></pre><p>This will install grunt globally on your machine. To install it on your local project directory, use:</p><pre><code>npm install grunt --save-dev</code></pre><p>Each Grunt project has a Gruntfile.js project file and the packages.json file as you will see in the root folder of your project after you install Grunt. The Gruntfile.js is used to configure or define the tasks and load the plugins. The packages file sits in the root right next to the Gruntfile and is used to list grunt and the grunt plugins used by the project as “devDependencies”.</p><p>Below are some of the tasks we want to accomplish for the blog to get started:</p><ul><li>Automate Hexo commands: ‘hexo clean’, ‘hexo generate’, ‘hexo server’</li><li>Create sitemap.xml and robots.txt files for SEO</li><li>Deploy to Amazon S3</li></ul><p><em><b>You can view my blog’s entire <a href="https://github.com/chitrangShah/chitrangshah.com/blob/master/blog/Gruntfile.js" target="_blank" rel="noopener">Gruntfile here</a>.</b></em></p><p>Let’s get started with automating the Hexo commands so we can have our local environment up and running with one command.</p><p>Download the <a href="https://www.npmjs.org/package/grunt-shell" target="_blank" rel="noopener">grunt shell plugin</a> in your project folder. I suggest reading the instructions on how it works to get a better understanding of the plugin.</p><pre><code>npm install grunt-shell --save-dev</code></pre><p>Once installed, you will see that the dependency has been automatically updated in the packages.json file. Now, let’s configure Gruntfile.js to load this plugin for use as shown below.</p><p><img src="/images/grunt_shell_task.png" alt="grunt_shell_task"></p><p>As you can see, I am combining all the hexo commands into one shell command. Go to bash and type grunt:</p><p><img src="/images/grunt_shell_task_bash.png" alt="grunt_shell_running"></p><p>It will run all the commands listed for shell in the Gruntfile, cleaning the public folder, generating the files in public folder and finally, starting the Hexo local server. Go to <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> to see your blog.</p><p>Awesome! We just automated our local environment to generate the files and start the server in one command. Let’s add some more plugins to lessen the burden of basic functionality such as updating sitemap every time you add new posts and creation of robots.txt.</p><p>Download this <a href="https://www.npmjs.org/package/grunt-sitemap" target="_blank" rel="noopener">Grunt Sitemap plugin</a> and the <a href="https://www.npmjs.org/package/grunt-robots-txt" target="_blank" rel="noopener">Grunt robots.txt plugin</a>:</p><pre><code>npm install grunt-sitemap --save-devnpm install grunt-robots-txt --save-dev</code></pre><p>You can configure them in the Gruntfile as shown below:</p><p><img src="/images/grunt_sitemap.png" alt="grunt_sitemap"></p><p><img src="/images/grunt_robots_txt.png" alt="grunt_robots_txt"></p><p>Now, every time you generate the static files for Hexo, a sitemap.xml file and a robots.txt file will be automatically generated in the public folder based on the configuration in Gruntfile.js. I have combined all these plugins and loaded them in one task:</p><p><img src="/images/grunt_local_build.png" alt="grunt_local_options"></p><p>Typing grunt in bash will execute those commands, generating the files including sitemap and robots.txt and starting the local server:</p><p><img src="/images/grunt_local.png" alt="grunt_local"></p><p>Last, but not the least, let’s setup grunt to deploy all of these changes to their specific environments/buckets on Amazon S3. To do that, download this awesome <a href="https://www.npmjs.org/package/grunt-s3" target="_blank" rel="noopener">Grunt S3 plugin</a>.</p><pre><code>npm install grunt-s3 --save-dev</code></pre><p>Once installed, you can configure it as shown below. Make sure that you have your AWS credentials. Also, add them in a separate JSON file and load them from that file to the Gruntfile for security reasons. You do not want your AWS credentials uploaded to your site or github by mistake!</p><p><img src="/images/grunt_s3_config.png" alt="grunt_amazon_s3"></p><p>As you can see, I am loading my credentials from an external file. I am calling the external file right at the start:</p><p><img src="/images/grunt_s3_credentials.png" alt="grunt_s3_credentials"></p><p>Combining all of the above tasks into single commands for each environment in the Gruntfile:</p><p><img src="/images/grunt_deploy.png" alt="grunt_deploy"></p><p>That’s it! If you type in “grunt staging or grunt production”, it will generate all the files in the public folder, connect to S3 with the credentials provided and push all the files there.</p><p>This is the end of the series on <a href="/tags/static-blog-setup/">Static Blog Setup with Hexo, Amazon S3 and Grunt</a>. If you face any issues, do not hesitate to leave a comment or <a href="mailto:hello@chitrangshah.com?subject=Hello,%20let&#39;s%20talk" class="fancybox" target="_blank" rel="noopener">Contact Me</a>.</p><h3 id="Happy-Blogging"><a href="#Happy-Blogging" class="headerlink" title="_Happy Blogging!!! _ :)"></a>_Happy Blogging!!! _ :)</h3>]]></content>
    
    <summary type="html">
    
      This post describes how to automate Hexo blog deployment to Amazon S3 using Grunt.js and grunt plugins.
    
    </summary>
    
    
      <category term="nodejs" scheme="https://chitrangshah.github.io/tags/nodejs/"/>
    
      <category term="hexo-setup" scheme="https://chitrangshah.github.io/tags/hexo-setup/"/>
    
      <category term="static-blog-setup" scheme="https://chitrangshah.github.io/tags/static-blog-setup/"/>
    
      <category term="amazon-s3" scheme="https://chitrangshah.github.io/tags/amazon-s3/"/>
    
      <category term="gruntjs" scheme="https://chitrangshah.github.io/tags/gruntjs/"/>
    
      <category term="automated-deployment" scheme="https://chitrangshah.github.io/tags/automated-deployment/"/>
    
  </entry>
  
  <entry>
    <title>Static Blog Setup with Hexo, Amazon S3 and Grunt - Hosting on Amazon S3</title>
    <link href="https://chitrangshah.github.io/2014/03/10/static-blog-site-with-hexo-part-2/"/>
    <id>https://chitrangshah.github.io/2014/03/10/static-blog-site-with-hexo-part-2/</id>
    <published>2014-03-10T22:57:07.000Z</published>
    <updated>2018-06-17T22:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is Part-2 in the series of posts on “<em>Static Blog Setup with Hexo, Amazon S3 and Grunt</em>“. You can view all the posts in this series here, <a href="/tags/static-blog-setup/">Static Blog Setup with Hexo, Amazon S3 and Grunt</a>.</em></p><p>In the last <a href="/2014/03/08/static-blog-site-with-hexo/">post</a>, we setup the blog on our local machine and tested it. Now, let’s move it to a server which will host our blog. We will be using <a href="http://aws.amazon.com/" target="_blank" rel="noopener">Amazon S3</a> as it’s easy to setup and do deployments. Then, I will give a brief overview on setting up DNS entries for the different blog domain/subdomains.</p><a id="more"></a><h3 id="Hosting-on-Amazon-S3"><a href="#Hosting-on-Amazon-S3" class="headerlink" title="Hosting on Amazon S3"></a>Hosting on Amazon S3</h3><p>First, <a href="http://aws.amazon.com/" target="_blank" rel="noopener">create an account on AWS</a> and get a unique access ID which will be used as the login to access the different services provided by AWS, in our case, Amazon S3.</p><p>Before we start, let’s quickly discuss how we will set it up. When creating web apps, multiple environments are created for testing and previewing the app before it goes live. For example, you can have a dev environment for local testing, staging environment for previewing before it goes live and production, which will be the live site. For our blog, we will follow the web app development methodology and create 3 environments for local testing (development), previewing the site (staging) and finally the live site (production).</p><p>I suggest reading <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html" target="_blank" rel="noopener">Setting up a static blog on S3</a> documentation to get a basic idea of how S3 works. In short, S3 works on the concepts of <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html" target="_blank" rel="noopener">buckets</a>. For our blog, we will create 3 buckets to store our blog data, basically, the contents of <em>public</em> folder which Hexo creates and has all the static files after generating. </p><h3 id="Creating-the-buckets"><a href="#Creating-the-buckets" class="headerlink" title="Creating the buckets"></a>Creating the buckets</h3><p>Once you login to AWS, go to the console and click on S3. Click on “Create Bucket” and enter the bucket name. </p><p><img src="/images/bucket_create.png" alt="create_s3_bucket"><br><strong><em>Make sure the bucket names corresponds to the domain/subdomain names as it will be easier to configure URL’s for routing later.</em></strong></p><p>Create 3 buckets for your blog domain:</p><ul><li><font color="maroon">yourblogdomain.com</font></li><li><font color="maroon"><a href="http://www.yourblogdomain.com" target="_blank" rel="noopener">www.yourblogdomain.com</a></font></li><li><font color="maroon">staging.yourblogdomain.com</font></li></ul><p>You will notice we have 2 buckets with the blog domain, one with “www” and one without it. That’s because, once the site is ready to go live, we will configure the “<a href="http://www.yourblogdomain.com&quot;" target="_blank" rel="noopener">www.yourblogdomain.com&quot;</a> bucket redirect to “yourblogdomain.com” or vice-versa.</p><p>The option to host the static website is disabled by default. Let’s enable it:</p><ul><li>Click on “Properties” for the selected bucket.</li><li>Under “Static Website Hosting” section, you’ll find “Enable website hosting”. Click it.</li></ul><p><img src="/images/s3_hosting_setup.png" alt="s3_bucket_properties"></p><ul><li>It gives the options to specify path for your “index” page, which is the blog landing page, and the error page. In my case, it will be index.html and 404.html as it’s located directly in the root.</li><li>Save the changes</li></ul><p>Now, we have our 3 environments setup, namely:</p><ul><li>local machine setup for (development), </li><li>staging bucket on s3 for (staging) environment <font color="maroon">[staging.yourblogdomain.com]</font></li><li>(production) buckets for the live site <font color="maroon">[yourblogdomain.com, <a href="http://www.yourblogdomain.com]" target="_blank" rel="noopener">www.yourblogdomain.com]</a></font></li></ul><p>You can upload the <em>public</em> folder static files using the “Upload” button into the buckets. Now, let’s setup the DNS for these buckets so they are active and ready to use.</p><h3 id="DNS-Changes"><a href="#DNS-Changes" class="headerlink" title="DNS Changes"></a>DNS Changes</h3><p><em>This section assumes you have bought your domain either through <a href="http://www.godaddy.com/" target="_blank" rel="noopener">Go Daddy</a>, <a href="http://www.networksolutions.com/index-v3.jsp" target="_blank" rel="noopener">Network Solutions</a> or some other domain registrar.</em></p><p>Currently, you can access your bucket through a very long and unfriendly URL such as:</p><p><img src="/images/s3_bucket_url.png" alt="s3_bucket_url"></p><p>Let’s route it to the bucket name you have created using <a href="http://aws.amazon.com/route53/" target="_blank" rel="noopener">Route 53</a>, which is Amazon’s cloud DNS service. I won’t go into too much detail on setting it up but basically, you need to create <a href="http://pixelcog.com/blog/2013/routing-with-s3/" target="_blank" rel="noopener">CNAME</a> records for the “www” subdomain and the “staging” subdomain and point it to the long url as shown above for the associated bucket. For the root domain, you need to create an <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/HowToAliasRRS.html" target="_blank" rel="noopener">A record</a> and point it to the root domain’s bucket. You can read more about it here, <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html" target="_blank" rel="noopener">Migrating an Existing Domain to Amazon Route 53</a>.</p><p>After setting up the DNS, it will take some time to propagate anywhere from 5 min to a couple of days. Once it propagates, you will be able to go <font color="maroon">yourblogdomain.com</font> or <font color="maroon">staging.yourblogdomain.com</font> and see your blog. You have just finished setting up hosting for your blog. </p><p>If you face any issues, do not hesitate to leave a comment or <a href="mailto:hello@chitrangshah.com?subject=Hello,%20let&#39;s%20talk" class="fancybox" target="_blank" rel="noopener">Contact Me</a>. :)</p><p>In the next and final post, I will cover how we can automate the deployment using <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a> so you can only focus on writing creative and informative posts and not worry about pushing the changes to S3 every time.</p>]]></content>
    
    <summary type="html">
    
      This post describes hosting a blog using Amazon S3 as it&#39;s easy to setup and do deployments. It includes a brief overview of how to setup DNS for the blog domain using Amazon Route 53.
    
    </summary>
    
    
      <category term="nodejs" scheme="https://chitrangshah.github.io/tags/nodejs/"/>
    
      <category term="hexo-setup" scheme="https://chitrangshah.github.io/tags/hexo-setup/"/>
    
      <category term="static-blog-setup" scheme="https://chitrangshah.github.io/tags/static-blog-setup/"/>
    
      <category term="amazon-s3" scheme="https://chitrangshah.github.io/tags/amazon-s3/"/>
    
      <category term="gruntjs" scheme="https://chitrangshah.github.io/tags/gruntjs/"/>
    
      <category term="hosting" scheme="https://chitrangshah.github.io/tags/hosting/"/>
    
      <category term="amazon-route-53" scheme="https://chitrangshah.github.io/tags/amazon-route-53/"/>
    
      <category term="dns" scheme="https://chitrangshah.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>Static Blog Setup with Hexo, Amazon S3 and Grunt - Initial setup</title>
    <link href="https://chitrangshah.github.io/2014/03/08/static-blog-site-with-hexo/"/>
    <id>https://chitrangshah.github.io/2014/03/08/static-blog-site-with-hexo/</id>
    <published>2014-03-09T01:00:00.000Z</published>
    <updated>2018-06-17T22:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is Part-1 in the series of posts on “<em>Static Blog Setup with Hexo, Amazon S3 and Grunt</em>“. You can view all the posts in this series here, <a href="/tags/static-blog-setup/">Static Blog Setup with Hexo, Amazon S3 and Grunt</a>.</em></p><p>As mentioned in my <a href="/2014/02/24/hello-world/">first post</a>, here I will describe how I setup this blog with <a href="http://zespia.tw/hexo/" target="_blank" rel="noopener">Hexo</a>, a blogging framework powered by <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>, using <a href="http://aws.amazon.com/s3/" target="_blank" rel="noopener">Amazon S3</a> for hosting and finally, using <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a> to automate the deployment and other tasks.</p><h1 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started!"></a><em>Let’s get started!</em></h1><a id="more"></a><h3 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h3><p>Before you start installing, I suggest reading the documentation on Hexo’s site which provides <a href="http://zespia.tw/hexo/docs/" target="_blank" rel="noopener">detailed instructions for installing Hexo</a>. </p><p>First, you need to install <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>, which is pre-requisite for Hexo. Optionally, I would recommend installing <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a> for tracking your project changes and signing-up at <a href="https://github.com/" target="_blank" rel="noopener">Github</a>. You can view all my blog files at <a href="https://github.com/chitrangShah/chitrangshah.com" target="_blank" rel="noopener">Chitrang’s Git Repo</a>.</p><p>Once Node.js is installed, go ahead and install Hexo:</p><pre><code>npm install hexo -g</code></pre><p><em>npm</em> means <a href="https://www.npmjs.org/" target="_blank" rel="noopener">Node Packaged Modules</a>, which is the package manager for Node.js, similar to what <a href="http://rubygems.org/" target="_blank" rel="noopener">Rubygems</a> is for Ruby and <a href="http://www.nuget.org/" target="_blank" rel="noopener">Nuget</a> for .NET framework.</p><h3 id="Hexo-folder-structure"><a href="#Hexo-folder-structure" class="headerlink" title="Hexo folder structure"></a>Hexo folder structure</h3><p>Create a folder called <em>blog</em> or <em>myblogname.com</em> on your desktop or projects folder. </p><p>Once Hexo is installed, you can create the folder structure for your blog:</p><pre><code>hexo init &lt;folder&gt;</code></pre><p>where <em>folder</em> is your blog folder which you created above. This will create the basic structure of your blog something similar as shown below:</p><p><img src="/images/blogfolder_structure.png" alt="blog_folder_structure"> </p><p>Blog themes are located in <em>themes</em> folder, posts go under __posts_ folder which is located under <em>source</em> and the generated files are created in a <em>public</em> folder which becomes the main site folder once you generate your blog as shown in the following steps. <em>Simple and Straightforward!</em></p><h3 id="Preview-the-blog"><a href="#Preview-the-blog" class="headerlink" title="Preview the blog"></a>Preview the blog</h3><p><em>Awesome!!!</em> Now you have everything setup, let’s preview the default blog theme that comes pre-installed and view it in the browser. First let’s generate all the files needed for the blog:</p><pre><code>hexo generate</code></pre><p><img src="/images/hexo_generate.png" alt="hexo_generate"> </p><p>This will create the <em>public</em> folder as mentioned above. To preview the blog:</p><pre><code>hexo server</code></pre><p>Go to <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> in your browser and you will be nicely greeted with a “Hello World, Welcome to Hexo” post.</p><p><img src="/images/hexo_hello_world.png" alt="hexo_hello_world"> </p><p>There you have it! You have just finished the initial setup of your blog. You can read more about setting up, writing posts and configuring Hexo <a href="http://zespia.tw/hexo/docs/" target="_blank" rel="noopener">here</a>. If you face any issues, do not hesitate to leave a comment or <a href="mailto:hello@chitrangshah.com?subject=Hello,%20let&#39;s%20talk" class="fancybox" target="_blank" rel="noopener">Contact Me</a>. :)</p><p>In the next post, I will cover how I setup hosting of my blog on <a href="http://aws.amazon.com/s3/" target="_blank" rel="noopener">Amazon S3</a>.</p>]]></content>
    
    <summary type="html">
    
      Static blog setup with Hexo, a blogging framework powered by Node.js, using Amazon S3 for hosting and finally, using Grunt to automate the deployment and other tasks.
    
    </summary>
    
    
      <category term="nodejs" scheme="https://chitrangshah.github.io/tags/nodejs/"/>
    
      <category term="hexo-setup" scheme="https://chitrangshah.github.io/tags/hexo-setup/"/>
    
      <category term="static-blog-setup" scheme="https://chitrangshah.github.io/tags/static-blog-setup/"/>
    
      <category term="amazon-s3" scheme="https://chitrangshah.github.io/tags/amazon-s3/"/>
    
      <category term="gruntjs" scheme="https://chitrangshah.github.io/tags/gruntjs/"/>
    
  </entry>
  
</feed>
